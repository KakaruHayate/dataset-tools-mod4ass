import os
import json
import csv
import argparse
import glob

def time_to_str(time):
    hours = int(time // 3600)
    minutes = int((time % 3600) // 60)
    seconds = time % 60
    return f'{hours:02d}:{minutes:02d}:{seconds:.2f}'

def csv_json_to_ass(csv_file, json_dir, ass_file):
    with open(csv_file, 'r') as f:
        reader = csv.reader(f, delimiter='\t')
        next(reader)  # Skip the header
        markers = list(reader)

    with open(ass_file, 'w', encoding='utf-8') as f:
        f.write('[Script Info]\n')
        f.write('; Script generated by dataset-tools-mod4ass\n; https://github.com/KakaruHayate/dataset-tools-mod4ass\n')
        f.write('Title: Default Aegisub file\n')
        f.write('ScriptType: v4.00+\n')
        f.write('\n[Aegisub Project Garbage]\n')
        f.write(f'Audio File: {os.path.splitext(os.path.basename(csv_file))[0]}.wav\n')
        f.write('[V4+ Styles]\n')
        f.write('Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n')
        f.write('Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1\n')
        f.write('\n[Events]\n')
        f.write('Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n')

        for i, marker in enumerate(markers):
            sample_rate = int(marker[3].split(' ')[0])
            start_time = float(marker[1]) / sample_rate
            end_time = start_time + float(marker[2]) / sample_rate
            start_time_str = time_to_str(start_time)
            end_time_str = time_to_str(end_time)

            json_file = os.path.join(json_dir, f'{os.path.splitext(os.path.basename(csv_file))[0]}_{str(i).zfill(3)}.json')
            with open(json_file, 'r', encoding='utf-8') as jf:
                data = json.load(jf)

            f.write(f'Dialogue: 0,{start_time_str},{end_time_str},Default,raw,0,0,0,,{data["raw_text"]}\n')
            f.write(f'Comment: 0,{start_time_str},{end_time_str},Default,lab,0,0,0,,{data["lab"]}\n')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--csv_path', required=True, help='Path to the directory containing the CSV files')
    parser.add_argument('--json_path', required=True, help='Path to the directory containing the JSON files')
    parser.add_argument('--ass_path', required=True, help='Path to the directory for output ASS files')
    args = parser.parse_args()

    csv_files = glob.glob(os.path.join(args.csv_path, '*.csv'))
    for csv_file in csv_files:
        basename = os.path.splitext(os.path.basename(csv_file))[0]
        ass_file = os.path.join(args.ass_path, f'{basename}.ass')
        csv_json_to_ass(csv_file, args.json_path, ass_file)

if __name__ == '__main__':
    main()